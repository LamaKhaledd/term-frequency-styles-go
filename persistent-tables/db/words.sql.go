// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: words.sql

package db

import (
	"context"
	"database/sql"
)

const getDocumentByName = `-- name: GetDocumentByName :one
SELECT id, name FROM documents WHERE name = ?
`

func (q *Queries) GetDocumentByName(ctx context.Context, name string) (Document, error) {
	row := q.db.QueryRowContext(ctx, getDocumentByName, name)
	var i Document
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertCharacter = `-- name: InsertCharacter :exec
INSERT INTO characters (id, word_id, value) VALUES (?, ?, ?)
`

type InsertCharacterParams struct {
	ID     sql.NullInt64 `json:"id"`
	WordID int64         `json:"word_id"`
	Value  string        `json:"value"`
}

func (q *Queries) InsertCharacter(ctx context.Context, arg InsertCharacterParams) error {
	_, err := q.db.ExecContext(ctx, insertCharacter, arg.ID, arg.WordID, arg.Value)
	return err
}

const insertDocument = `-- name: InsertDocument :exec
INSERT INTO documents (name) VALUES (?)
`

func (q *Queries) InsertDocument(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, insertDocument, name)
	return err
}

const insertWord = `-- name: InsertWord :exec
INSERT INTO words (id, doc_id, value) VALUES (?, ?, ?)
`

type InsertWordParams struct {
	ID    sql.NullInt64 `json:"id"`
	DocID int64         `json:"doc_id"`
	Value string        `json:"value"`
}

func (q *Queries) InsertWord(ctx context.Context, arg InsertWordParams) error {
	_, err := q.db.ExecContext(ctx, insertWord, arg.ID, arg.DocID, arg.Value)
	return err
}

const topWords = `-- name: TopWords :many
SELECT value, COUNT(*) as count
FROM words
GROUP BY value
ORDER BY count DESC
LIMIT 25
`

type TopWordsRow struct {
	Value string `json:"value"`
	Count int64  `json:"count"`
}

func (q *Queries) TopWords(ctx context.Context) ([]TopWordsRow, error) {
	rows, err := q.db.QueryContext(ctx, topWords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TopWordsRow
	for rows.Next() {
		var i TopWordsRow
		if err := rows.Scan(&i.Value, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
